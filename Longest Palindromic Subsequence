
public class LongestPalindromicSubsequence {
	
	public int longestPalindrom(String s)
	{
		char[] c = s.toCharArray();
		
		int dp[][] = new int[c.length][c.length];
		
		for(int i = 0; i < c.length; i++)
			dp[i][i] = 1;
		
		
		for(int k = 2; k <= c.length; k++)
		{
			for(int i = 0; i < c.length - k + 1; i++)
			{
				int j = i + k - 1;
				if(k == 2 & c[i] == c[j])
					dp[i][j] = 2;
				else if(c[i] == c[j])
					dp[i][j] = 2 + dp[i+1][j-1];
				else
					dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);
				
			}
		}
		
		return dp[0][c.length - 1];
	}
	
	public static void main(String args[]){
        LongestPalindromicSubsequence lps = new LongestPalindromicSubsequence();
        String str = "agbdddba";
        int r2 = lps.longestPalindrom(str);
        System.out.print(r2);
    }

}
